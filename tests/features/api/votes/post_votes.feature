@api @pov @functional

Feature: Post votes
  Test performed on API endpoints, contains test cases related to the votes in an isuue with POST method.

  @pov01 @smoke @loginUser1 @deleteGame
  Scenario: Add a vote in an issue
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov01 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value                    |
      | name        | Issue pov01              |
      | description | Add a vote to this Issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | 2                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "data" with:
      | Key                               | value                                     |
      | name                              | Game pov01                                |
      | status                            | PICKED_CARDS                              |
      | issues.0.issueVotes.0.player.id   | <Game.playersInGame.0.playerDetails.id>   |
      | issues.0.issueVotes.0.player.name | <Game.playersInGame.0.playerDetails.name> |
      | issues.0.issueVotes.vote          | 2                                         |
      | issues.0.isAutoGenerated          | false                                     |
    And the response schema should be verified with "get_issue"
    And the response status code should be 200

  @pov02 @negative @loginUser1 @deleteGame
  Scenario: Verify if the user is trying to vote on the same issue again
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov02 |
      | deck.name | T-shirt    |
    And the user creates an issue with:
      | Key         | value                    |
      | name        | Issue pov02              |
      | description | Add a vote to this Issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | S                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | L                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                                                                              |
      | errorMessage    | Record validation failed                                                           |
      | details.0.field | Player id                                                                          |
      | details.0.error | The player with the id: <Game.playersInGame.0.playerDetails.id> has already voted. |
    And the response status code should be 400

  @pov03 @negative @loginUser1 @deleteGame
  Scenario: Verify if the user cannot vote with an empty vote attribute on payload
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov03 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value           |
      | name        | Issue pov03     |
      | description | The first issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | (EmptyString)                             |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                    |
      | errorMessage    | Record validation failed |
      | details.0.error | vote: must not be empty  |
    And the response status code should be 400

  @pov04 @negative @loginUser1 @deleteGame
  Scenario: Verify if the user is able to cast a vote with bad authentication
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov04 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value           |
      | name        | Issue pov04     |
      | description | The first issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | 2                                         |
    When the "user invalid" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                |
      | errorMessage    | Bad User credentials |
      | details.0.field | Authorization        |
      | details.0.error | Unauthorized token   |
    And the response status code should be 401

  @pov05 @negative @loginUser1 @deleteGame
  Scenario: Verify if the user can cast a vote without the name field in the payload
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov05 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value           |
      | name        | Issue pov05     | 
      | description | The first issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | 2                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                    |
      | errorMessage    | Record validation failed |
      | details.0.field | player                     |
      | details.0.error | field: name is mandatory  |
      | statusCode      | 400                      |
    And the response status code should be 400

  @pov06 @acceptance @negative @loginUser1 @deleteGame
  Scenario: Verify if the user cannot vote for a deleted issue
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov06 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value           |
      | name        | Issue pov06     |
      | description | The first issue |
    And the "user1" sends a "DELETE" request to "/planning-poker/games/issues/<Issues.0.id>"
    And the response status code should be 204
    And the deleted issue ID is saved
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | 2                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                                      |
      | errorMessage    | Entity not found                           |
      | details.0.field | ID                                         |
      | details.0.error | Issue with ID: <Issues.0.id> was not found |
    And the response status code should be 404

  @pov07 @negative @loginUser1 @deleteGame @bug
  Scenario: Verify that the user attempts to vote with an empty attribute for the name
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov07 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value           |
      | name        | Issue pov07     |
      | description | The first issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | (EmptyString)                             |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | 2                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                    |
      | errorMessage    | Record validation failed |
      | details.0.field | name                     |
      | details.0.error | name: Name is mandatory  |
      | statusCode      | 400                      |
    And the response status code should be 400

  @pov08 @negative @loginUser1 @deleteGame
  Scenario: Verify that the user cannot vote on an issue with a different vote than the game's deck
    Given the user creates a game with:
      | Key       | value      |
      | name      | Game pov08 |
      | deck.name | Fibonacci  |
    And the user creates an issue with:
      | Key         | value           |
      | name        | Issue pov08     |
      | description | The first issue |
    And the user sets the following request body for a "issueVotes":
      | Key              | value                                     |
      | player.id        | <Game.playersInGame.0.playerDetails.id>   |
      | player.name      | <Game.playersInGame.0.playerDetails.name> |
      | player.userOwner | <Game.playersInGame.0.playerDetails.name> |
      | vote             | 0                                         |
    And the "user1" sends a "POST" request to "/planning-poker/games/issues/<Issues.0.id>"
    Then the response body should verify the "error" with:
      | Key             | value                                  |
      | errorMessage    | Record validation failed               |
      | details.0.error | Invalid vote for current voting system |
      | details.0.field | vote                                   |
      | statusCode      | 400                                    |
    And the response status code should be 400
